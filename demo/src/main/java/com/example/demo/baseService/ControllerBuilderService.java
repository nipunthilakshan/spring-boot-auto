package com.example.demo.baseService;

import com.squareup.javapoet.*;
import com.sun.jnlp.ApiDialog;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.hibernate.validator.internal.util.logging.Messages_$bundle;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.*;

import javax.lang.model.element.Modifier;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.ArrayList;

@Service
public class ControllerBuilderService {

    private String classType;

    public void generateController(String swaggerName,String controllerName,String context,String urlInput,String method,String ResponseModel, String... outterRequestModelName){
        MethodSpec getSpec = null;
        MethodSpec postSpec = null;
        classType = ResponseModel+".class";

//        System.out.println(ControllerBuilderService.class);

        ArrayList<MethodSpec> methodSpecs = new ArrayList<>();

        if(method.equals("GET")){
            getSpec = this.getMethodBuilder(urlInput,ResponseModel);
            methodSpecs.add(getSpec);
        }if(method.equals("POST")){
            postSpec = this.postMethodBuilder(urlInput,outterRequestModelName[0]);
            methodSpecs.add(postSpec);
        }

//        MethodSpec postSpec = this.postMethodSpec();

        TypeSpec controllerSpec = TypeSpec.classBuilder(controllerName)
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(RestController.class)
                .addAnnotation(AnnotationSpec.builder(Api.class)
                        .addMember("value","$S", context)
                        .addMember("description","$S", swaggerName+ " profile")
                        .addMember("produces","$S","application/json")
                        .build())
                .addAnnotation(AnnotationSpec.builder(RequestMapping.class)
                        .addMember("value","$S", context)
                        .build())
                .addAnnotation(AnnotationSpec.builder(SuppressWarnings.class)
                        .addMember("value","$S", "unchecked")
                        .build())
                .addMethods(methodSpecs)
                .build();



        JavaFile controllerJavafile = JavaFile.builder("com.example.demo.controller",controllerSpec)
                .addFileComment("Auto generated by Java Poet")
                .build();

        try {

            controllerJavafile.writeTo(Paths.get("src/main/java"));

        }catch (IOException e) {
            // TODO: handle exception
            System.out.println("fail !!!");
        }

    }

    private MethodSpec getMethodBuilder(String urlInput,String ResponseModel){
        ArrayList<String> inputParams = new ArrayList<>();
        ArrayList<ParameterSpec> parameterSpecs = new ArrayList<>();
        if(isQueryParam(urlInput)){
            String[] queryParams = urlInput.split("\\?");
            String queryParamStr= "?";
            if(queryParams[1].contains("&")){
                String[] prms = queryParams[1].split("&");
                for (String prm: prms) {
                    inputParams.add(prm.split("=")[0]);
                    queryParamStr +=""+prm.split("=")[0]+"={"+prm.split("=")[0]+"}&";
                }
//                queryParamStr = queryParamStr.substring(0,queryParamStr.length()-1);
            }else{
                inputParams.add(queryParams[1].split("=")[0]);
//                queryParamStr +=""+queryParams[1].split("=")[0]+"={"+queryParams[1].split("=")[0]+"}";
            }

            for(int i = 0; i < inputParams.size() ; i++ ){
                if(inputParams.get(i) != null && inputParams.get(i).length()>0){
                    ParameterSpec parameterSpec = ParameterSpec.builder(String.class, inputParams.get(i))
                            .addAnnotation(AnnotationSpec.builder(RequestParam.class)
                                    .addMember("value","$S", inputParams.get(i))
                                    .build())
                            .build();
                    parameterSpecs.add(parameterSpec);
                }
            }




            MethodSpec getApiMethodSpec = MethodSpec.methodBuilder("getAPI")
                    .addModifiers(Modifier.PUBLIC)
                    .addAnnotation(AnnotationSpec.builder(ApiOperation.class)
                            .addMember("value","$S", "get "+queryParams[0])
                            .addMember("response",this.classType)
                            .build())
                    .addAnnotation(AnnotationSpec.builder(ApiResponses.class)
                            .addMember("value","$L",AnnotationSpec.builder(ApiResponse.class)
                                    .addMember("code", "$L", 200)
                                    .addMember("message", "$S", queryParams[0]+" Details Retrieved")
                                    .addMember("response",classType)
                                    .build())
                            .addMember("value","$L",AnnotationSpec.builder(ApiResponse.class)
                                    .addMember("code", "$L", 500)
                                    .addMember("message", "$S", "Internal Server Error")
                                    .build())
                            .addMember("value", "$L",AnnotationSpec.builder(ApiResponse.class)
                                    .addMember("code", "$L", 404)
                                    .addMember("message", "$S", queryParams[0]+" not found")
                                    .build())
                            .build())

                    .addAnnotation(AnnotationSpec.builder(GetMapping.class)
                            .addMember("value","$S", queryParams[0])
                            .build())
//
//                    .addAnnotation(AnnotationSpec.builder(RequestMapping.class)
//                            .addMember("value","$S",queryParams[0])
//                            .addMember("method","$L",RequestMethod.GET)
//                            .build())
                    .addParameters(parameterSpecs)
                    .returns(ParameterizedTypeName.get(ClassName.get(ResponseEntity.class),ClassName.get("com.example.demo.model",ResponseModel)))
                    .addModifiers(Modifier.PUBLIC)
                    .addComment("TODO")
                    .addStatement("return null")
                    .build();

            return getApiMethodSpec;

        }else{
            String[] pathParams = urlInput.split("/");
            String pathParamStr = "/get";
            for (String prm: pathParams) {
                if(prm != null && prm.length()>0){
                    pathParamStr = pathParamStr+"/{"+prm+"}";
                    inputParams.add(prm);
                }
            }
            for(int i = 0; i < inputParams.size() ; i++ ){
                if(inputParams.get(i) != null && inputParams.get(i).length()>0){
                    ParameterSpec parameterSpec = ParameterSpec.builder(String.class, inputParams.get(i))
                            .addAnnotation(AnnotationSpec.builder(PathVariable.class)
                                    .addMember("value","$S", inputParams.get(i))
                                    .build())
                            .build();
                    parameterSpecs.add(parameterSpec);
                }
            }

            MethodSpec getApiMethodSpec = MethodSpec.methodBuilder("getAPI")
                    .addModifiers(Modifier.PUBLIC)
                    .addAnnotation(AnnotationSpec.builder(ApiOperation.class)
                            .addMember("value","$S", "get "+pathParamStr)
                            .addMember("response",classType)
                            .build())

                    .addAnnotation(AnnotationSpec.builder(ApiResponses.class)
                            .addMember("value","$L",AnnotationSpec.builder(ApiResponse.class)
                                    .addMember("code", "$L", 200)
                                    .addMember("message", "$S", pathParamStr+" Details Retrieved")
                                    .addMember("response",classType)
                                    .build())
                            .addMember("value","$L",AnnotationSpec.builder(ApiResponse.class)
                                    .addMember("code", "$L", 500)
                                    .addMember("message", "$S", "Internal Server Error")
                                    .build())
                            .addMember("value", "$L",AnnotationSpec.builder(ApiResponse.class)
                                    .addMember("code", "$L", 404)
                                    .addMember("message", "$S", pathParamStr+" not found")
                                    .build())
                            .build())

                    .addAnnotation(AnnotationSpec.builder(GetMapping.class)
                            .addMember("value","$S", pathParamStr)
                            .build())



                    .addParameters(parameterSpecs)
                    .returns(ParameterizedTypeName.get(ClassName.get(ResponseEntity.class),ClassName.get("com.example.demo.model",ResponseModel)))
                    .addModifiers(Modifier.PUBLIC)
                    .addComment("TODO")
                    .addStatement("return null")
                    .build();

            return getApiMethodSpec;
        }
    }

    private MethodSpec postMethodBuilder(String urlInput,String outterRequestModelName){
        ArrayList<String> inputParams = new ArrayList<>();
        ArrayList<ParameterSpec> parameterSpecs = new ArrayList<>();

        if(isQueryParam(urlInput)){
            String[] queryParams = urlInput.split("\\?");
            String queryParamStr= "?";
            if(queryParams[1].contains("&")){
                String[] prms = queryParams[1].split("&");
                for (String prm: prms) {
                    inputParams.add(prm.split("=")[0]);
                    queryParamStr +=""+prm.split("=")[0]+"={"+prm.split("=")[0]+"}&";
                }
//                queryParamStr = queryParamStr.substring(0,queryParamStr.length()-1);
            }else{
                inputParams.add(queryParams[1].split("=")[0]);
//                queryParamStr +=""+queryParams[1].split("=")[0]+"={"+queryParams[1].split("=")[0]+"}";
            }

            for(int i = 0; i < inputParams.size() ; i++ ){
                if(inputParams.get(i) != null && inputParams.get(i).length()>0){
                    ParameterSpec parameterSpec = ParameterSpec.builder(String.class, inputParams.get(i))
                            .addAnnotation(AnnotationSpec.builder(RequestParam.class)
                                    .addMember("value","$S", inputParams.get(i))
                                    .build())
                            .build();
                    parameterSpecs.add(parameterSpec);
                }
            }
            MethodSpec postSpec = MethodSpec.methodBuilder("postAPI")
                    .addModifiers(Modifier.PUBLIC)
//				.addAnnotation(Autowired.class)
                    .addAnnotation(AnnotationSpec.builder(PostMapping.class)
                            .addMember("value","$S", queryParams[0])
                            .build())
                    .addParameter(ParameterSpec.builder(ClassName.get("com.example.demo.model",outterRequestModelName), "input")
                            .addAnnotation(AnnotationSpec.builder(RequestBody.class)
                                    .build())
                            .build())
                    .addParameters(parameterSpecs)
                    .returns(ParameterizedTypeName.get(ClassName.get(ResponseEntity.class),WildcardTypeName.subtypeOf(Object.class)))
                    .addModifiers(Modifier.PUBLIC)
                    .addComment("TODO")
                    .addStatement("return null")
                    .build();
            return postSpec;
        }else{
            String[] pathParams = urlInput.split("/");
            String pathParamStr = "/post";
            for (String prm: pathParams) {
                if(prm != null && prm.length()>0){
                    pathParamStr = pathParamStr+"/{"+prm+"}";
                    inputParams.add(prm);
                }
            }

            for(int i = 0; i < inputParams.size() ; i++ ){
                if(inputParams.get(i) != null && inputParams.get(i).length()>0){
                    ParameterSpec parameterSpec = ParameterSpec.builder(String.class, inputParams.get(i))
                            .addAnnotation(AnnotationSpec.builder(PathVariable.class)
                                    .addMember("value","$S", inputParams.get(i))
                                    .build())
                            .build();
                    parameterSpecs.add(parameterSpec);
                }
            }

            MethodSpec postSpec = MethodSpec.methodBuilder("postAPI")
                    .addModifiers(Modifier.PUBLIC)
//				.addAnnotation(Autowired.class)
                    .addAnnotation(AnnotationSpec.builder(PostMapping.class)
                            .addMember("value","$S", pathParamStr)
                            .build())
                    .addParameter(ParameterSpec.builder(ClassName.get("com.example.demo.model",outterRequestModelName), "input")
                            .addAnnotation(AnnotationSpec.builder(RequestBody.class)
                                    .build())
                            .build())
                    .addParameters(parameterSpecs)
                    .returns(ParameterizedTypeName.get(ClassName.get(ResponseEntity.class),WildcardTypeName.subtypeOf(Object.class)))
                    .addModifiers(Modifier.PUBLIC)
                    .addComment("TODO")
                    .addStatement("return null")
                    .build();
            return postSpec;
        }

    }

    private boolean isQueryParam(String query){
        if(query.contains("?") || query.contains("&")){
            return true;
        }else return false;
    }

}
