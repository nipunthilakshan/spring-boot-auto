package com.example.demo.baseService;

import com.example.demo.Util.Function;
import com.example.demo.baseModel.BaseModel;
import com.squareup.javapoet.*;

import javax.lang.model.element.Modifier;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.ArrayList;

public class ModelBuilderService {

    public void generateModels(ArrayList<BaseModel> baseModels) {
//        System.out.println(baseModels);

        for (BaseModel bm: baseModels) {
            ArrayList<MethodSpec> modelMethodsSpecs = this.generateModelMethodSpec(bm);
            ArrayList<FieldSpec> fieldSpecs = this.generateModelFieldSpec(bm);
//            System.out.println(bm.getModelName());
            TypeSpec modelSpec = TypeSpec.classBuilder(Function.capitalizeFirstLetter(bm.getModelName()))
                    .addModifiers(Modifier.PUBLIC)
                    .addFields(fieldSpecs)
                    .addMethods(modelMethodsSpecs)
                    .build();

            JavaFile modelJavafile = JavaFile.builder("com.example.demo.model", modelSpec)
                    .addFileComment("Auto generated by Java Poet")
                    .build();
            try{
                modelJavafile.writeTo(Paths.get("src/main/java"));
            }catch(IOException ex){
                // TODO: handle exception
                System.out.println("fail !!!");
            }
        }


    }
    private ArrayList<FieldSpec> generateModelFieldSpec(BaseModel baseModel){
        ArrayList<FieldSpec> fieldSpecs =  new ArrayList<>();
        for(int i = 0; i < baseModel.getParameterTypes().size() ; i++){
            FieldSpec fieldSpec = FieldSpec.builder(baseModel.getParameterTypes().get(i), baseModel.getParameterNames().get(i), Modifier.PRIVATE)
                    .build();
            fieldSpecs.add(fieldSpec);
        }
       return fieldSpecs;
    }
    private ArrayList<MethodSpec> generateModelMethodSpec(BaseModel baseModel){

        ArrayList<MethodSpec> methodSpecs =  new ArrayList<>();

        for(int i = 0; i < baseModel.getParameterTypes().size() ; i++){
            MethodSpec getMethodSpec = MethodSpec.methodBuilder("get"+Function.capitalizeFirstLetter(baseModel.getParameterNames().get(i)))
                    .addModifiers(Modifier.PUBLIC)
                    .returns(baseModel.getParameterTypes().get(i))
                    .addStatement("return "+baseModel.getParameterNames().get(i))
                    .build();
            MethodSpec setMethodSpec = MethodSpec.methodBuilder("set"+ Function.capitalizeFirstLetter(baseModel.getParameterNames().get(i)))
                    .addModifiers(Modifier.PUBLIC)
                    .addParameter(baseModel.getParameterTypes().get(i),baseModel.getParameterNames().get(i))
                    .addStatement("this."+baseModel.getParameterNames().get(i)+" = "+baseModel.getParameterNames().get(i))
                    .build();
            methodSpecs.add(getMethodSpec);
            methodSpecs.add(setMethodSpec);
        }
        return methodSpecs;

    }


}
